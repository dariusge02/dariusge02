#include <iostream>
#include <vector>
#include <unistd.h>

bool isPrime(int num)
{
    if (num <= 1) return false;
    for (int i = 2; i * i <= num; ++i)
    {
        if (num % i == 0) return false;
    }
    return true;
}

void findPrimesInRange(int start, int end, int pipe_write)
{
    std::vector<int> primes;
    for (int i = start; i <= end; ++i)
    {
        if (isPrime(i))
        {
            primes.push_back(i);
        }
    }

    write(pipe_write, primes.data(), primes.size() * sizeof(int));
    close(pipe_write);
}

int main()
{
    const int num_processes = 10;
    const int range_size = 1000;
    const int total_range = 10000;

    int pipe_fd[2];
    pipe(pipe_fd);

    for (int i = 0; i < num_processes; ++i)
    {
        int start = i * range_size + 1;
        int end = (i + 1) * range_size;
        if (end > total_range)
        {
            end = total_range;
        }

        int pid = fork();

        if (pid == 0)
        { // child process
            close(pipe_fd[0]); // close unused read end
            findPrimesInRange(start, end, pipe_fd[1]);
            return 0;
        }
    }

    close(pipe_fd[1]); // close write end in parent

    std::vector<int> all_primes;

    while (true)
    {
        int buffer[range_size];
        ssize_t bytes_read = read(pipe_fd[0], buffer, sizeof(buffer));

        if (bytes_read == 0)
        {
            break; // no more data
        }

        int num_primes = bytes_read / sizeof(int);
        all_primes.insert(all_primes.end(), buffer, buffer + num_primes);
    }

    close(pipe_fd[0]); // close read end

    std::cout << "Prime numbers up to 10,000: ";
    for (int prime : all_primes) {
        std::cout << prime << " ";
    }
    std::cout << std::endl;

return 0;
}

